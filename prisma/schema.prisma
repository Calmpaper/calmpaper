generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}


model User {
  id             Int        @default(autoincrement()) @id
  name           String?
  image          String?
  avatar         String?
  username       String?    @unique
  firstname      String?
  givenname      String?
  fullname       String?
  email          String?    @unique
  emailVerified  DateTime?  @map(name: "email_verified")
  books          Book[]     @relation("UserBookAuthor")
  favoriteBooks  Book[]     @relation("UserBookReader")
  chapters       Chapter[]
  reviews        Review[]
  likes          Like[]
  comments       Comment[]
  following      User[]     @relation("UserFollowers", references: [id])
  followers      User[]     @relation("UserFollowers", references: [id])
  createdAt      DateTime   @default(now()) @map(name: "created_at")
  updatedAt      DateTime   @default(now()) @map(name: "updated_at")
  googleId       String?    @unique
  getStreamToken String?    @unique
  stripeUserId   Int?       @unique

  @@map(name: "users")
}

model Book {
  id             Int        @default(autoincrement()) @id
  name           String
  description    String
  image          String?
  createdAt      DateTime   @default(now())
  author         User?      @relation("UserBookAuthor", fields: [authorId], references: [id])
  authorId       Int?
  readers        User[]     @relation("UserBookReader")
  chapters       Chapter[]
  tags           Tag[]      @relation(references: [id])
  genres         Genre[]    @relation(references: [id])
  likes          Like[]
  views          Int        @default(0)
  reviews        Review[]
  comments       Comment[]
}

model Chapter {
  id             Int        @default(autoincrement()) @id
  title          String?
  content        String
  image          String?
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  likes          Like[]
  views          Int        @default(0)
  reviews        Review[]
  comments       Comment[]
}

model Tag {
  id             Int        @default(autoincrement()) @id
  label          String
  books          Book[]     @relation(references: [id])
}

model Genre {
  id             Int        @default(autoincrement()) @id
  label          String
  books          Book[]     @relation(references: [id])
}

model Comment {
  id             Int        @default(autoincrement()) @id
  body           String
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  likes          Like[]
  replies        Comment[]  @relation("CommentReplies")
  parentId       Int?
  parent         Comment?   @relation("CommentReplies", fields: [parentId], references: [id])
  isChild        Boolean    @default(false)
}

model Review {
  id             Int        @default(autoincrement()) @id
  stars          Int
  message        String?
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  likes          Like[]
}

model Like {
  id             Int        @default(autoincrement()) @id
  createdAt      DateTime   @default(now())
  author         User?      @relation(fields: [authorId], references: [id])
  authorId       Int?
  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
  comment        Comment?   @relation(fields: [commentId], references: [id])
  commentId      Int?
  review         Review?    @relation(fields: [reviewId], references: [id])
  reviewId       Int?
}

model Account {
  id                 Int       @default(autoincrement()) @id
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")

  @@map(name: "accounts")
}

model Session {
  id           Int      @default(autoincrement()) @id
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model VerificationRequest {
  id         Int      @default(autoincrement()) @id
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime  @default(now()) @map(name: "created_at")
  updatedAt  DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Transaction {
  id             Int        @default(autoincrement()) @id
  totalAmount    Int
  currency       String
  paymentId      Int

  book           Book?      @relation(fields: [bookId], references: [id])
  bookId         Int?
  chapter        Chapter?   @relation(fields: [chapterId], references: [id])
  chapterId      Int?
}
